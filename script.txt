Git Init
Creates a new repository within a folder (appears as hidden .git file when view hidden files is enabled). This allows you to continue with other commands.
Syntax:
git init (Creates a new local repository within the current folder)

Git Status
Displays the status of files within the folder, such as new files, modified files and files that are added/staged. New/modified files are displayed as red and added/staged files are shown as green.
Syntax:
git status (Lists all modified, added and current files)

Git Add
Adds new/modified files to the index and stages them to be committed using the git init command. It is advisable to do another git status command to confirm that the git add was successful. MUST BE DONE BEFORE COMMIT.
Syntax:
git add <file name/.> (Adds the selected file or all files to be staged for commit)

Git Commit
Creates a new commit using the staged files within the index and a log message documenting the changes. This commit will be able to be seen on GitHub when git remote is used later.
Syntax:
git commit (Enters editor mode/multiline comment)

Git Log
Shows the logs within a commit, such as message logs included with a commit command (as shown below).
Syntax:
git log (Display the entire commit history) [<space> for more and <q> to exit]
git log -stat (Shows the altered files and line changed)
git log -graph (Draws up branch paths)

Git Branch
Creates a new branch within the current local repository. You can also use a command to list all the current branches within the current repository. The default branch is called either master or main, below it is remained from master to main.
Syntax:
git branch <name> (Creates a new branch in the current local repository)
git branch -a/-l/-r (Lists all branches within the repository)

Git Remote
Allows the creation of a remote repository within the current folder. Also allows you to list and delete these remote repositories if necessary. This will allow you to view your work and commits up on GitHub when they are pushed with the git push command (see next command).
Syntax:
git remote add <name> <url> (Creates a new remote repository)
git remote -v (Lists all repositories on remote server)
git remote rm <name> (Delete an existing remote repository)

Git Push
Uploads all local commits within the repository/branch to the matching remote repository/branch.
Syntax:
git push <remote> <branch> (Pushes the given remote and branch commit up to GitHub)

Git Clone
Clones an existing repository (usually a remote one) into a new directory (perhaps on another file system or computer).
Syntax:
git clone <url> (Clones the remote repository within the indicated url)

Git Checkout
Allows the switching between different branches within a repository or, more accurately, makes the branch/node the current head. As shown in the screenshot below the head is assigned to main so no change is needed to be made (there are no other branches within this repository).
Syntax:
git checkout <branch_name> (Makes this node the current head)

Git Merge
Allows the current assigned head/branch of the repository to be merged with the main/master branch. Useful for combining two different branches, which is what this command is most used for. The below screenshot shows that everything is up to date (as there is only one branch in this repository, which is main/master).
Syntax:
git merge master/main (Merge the current head with main/master branch, git auto applies changes)

Git Pull
This command performs a fetch and merge command at the same time. It will first fetch files from the remote repository then it will merge them with the current head/branch. As shown below, no changes were made in this case as the local repository and the remote repository are both the same and up to date.
Syntax:
git pull <remote> (Perform a fetch and a merge)

Git Stash
Shelves changes made to the current working directory so another thing can be worked on, allowing you to come back and reapply these changes later. CAN ONLY BE DONE BEFORE COMMIT NOT AFTER 
Syntax:
git stash (Stashes away an un-staged or staged, but not committed, work to be reapplied later)
git stash pop (Removes the stash changes and applies them to your working directory)


